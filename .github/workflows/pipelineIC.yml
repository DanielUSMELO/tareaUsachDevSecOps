name: Workflow
on:
  push:
    branches:
      - pipeline

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with: 
          java-version: '17'
          distribution: 'adopt' 

      - name: Set Environment Variables     
        run: echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV

      # Triggering SonarQube analysis as results of it are required by Quality Gate check.
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Mostrar REPO_NAME
        run: echo "El REPO_NAME es $REPO_NAME"
        env:
          REPO_NAME: ${{ github.event.repository.name }}

      - name: Verificar análisis en SonarCloud
        run: |
          REPO_NAME="DanielUSMELO_tareaUsachDevSecOps"
          response=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/ce/component?component=$REPO_NAME")
          echo "Respuesta de la API: $response"
      - name: Validate Quality Gate
        run: |
          echo "Validando el estado del Quality Gate..."

          # Definir REPO_NAME (usando el projectKey de SonarCloud)
          REPO_NAME="DanielUSMELO_tareaUsachDevSecOps"

          # Obtener el analysisId
          response=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/ce/component?component=$REPO_NAME")
          echo "Respuesta de la API para obtener analysisId: $response"
    
          analysisId=$(echo "$response" | jq -r '.current.analysisId // empty')

          if [ -z "$analysisId" ]; then
            echo "Error: No se pudo obtener el analysisId. Verifica el componente y las credenciales."
            exit 1
          fi

          echo "analysisId obtenido: $analysisId"

          # Obtener el estado del Quality Gate
          response_quality_gate=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId")
          echo "Respuesta de la API para obtener Quality Gate status: $response_quality_gate"
    
          qualityGateStatus=$(echo "$response_quality_gate" | jq -r '.projectStatus.status // empty')

          if [ -z "$qualityGateStatus" ]; then
            echo "Error: No se pudo obtener el estado del Quality Gate. Verifica el análisis."
            exit 1
          fi

          echo "Estado del Quality Gate: $qualityGateStatus"

          # Validar estado del Quality Gate
          if [ "$qualityGateStatus" != "OK" ]; then
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
            echo "Verificando vulnerabilidades críticas..."
      
            # Obtener el número de vulnerabilidades críticas
            vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER,HIGH,MEDIUM" | jq -r '.total // 0')
      
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
              exit 1
            else
              echo "No se encontraron vulnerabilidades críticas, pero el Quality Gate no fue aprobado."
              exit 1
            fi
          else
            echo "El proyecto cumple con el Quality Gate ."
            echo "Verificando vulnerabilidades críticas, altas y medias."
      
            # Obtener el número de vulnerabilidades críticas
            vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER,HIGH,MEDIUM" | jq -r '.total // 0')
      
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
              exit 1
            else
              echo "No se encontraron vulnerabilidades críticas, pero el Quality Gate fue $vulnerabilities"
            
            fi
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

          

   


          
